@mixin cover($setting: null) {
    @if $setting == 'width' or $setting == 'w' {
        width: 100%;
    }
    @else if $setting == 'height' or $setting == 'h' {
        height: 100%;
    }
    @else {
        width: 100%;
        height: 100%;
    }
}

@mixin center($setting: null) {
    position: absolute;
    @if $setting == 'h' or $setting == 'hor' or $setting == 'horizontal' {
        left: 50%;
        transform: translate(-50%, 0);
    }
    @else if $setting == 'w' or $setting == 'ver' or $setting == 'vertical' {
        top: 50%;
        transform: translate(0, -50%);
    }
    @else {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin margin-auto($setting: null) {
    margin: {
        @if $setting == 'l' or $setting == 'left'{
            left: auto;
        }
        @else if $setting == 'r' or $setting == 'right'{
            right: auto;
        }
        @else{
            left: auto;
            right: auto;
        }
    }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

@mixin ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin arrow_helper($arrowSize, $arrowColor, $margin, $side, $align) {
  @if $side == "top" {
    border-bottom-color: $arrowColor;
    top: -2 * $arrowSize;
  }
  @if $side == "bottom" {
    border-top-color: $arrowColor;
    bottom: -2 * $arrowSize;
  }
  @if $side == "left" {
    border-right-color: $arrowColor;
    left: -2 * $arrowSize;
  }
  @if $side == "right" {
    border-left-color: $arrowColor;
    right: -2 * $arrowSize;
  }
  @if $side == "right" or $side == "left" {
    @if $align == "center" {
      top: 50%;
      margin-top: -$arrowSize;
    }
    @else if $align == "top" {
      top: $margin;
    }
    @else if $align == "bottom" {
      bottom: $margin;
    }
  }
  @if $side == "bottom" or $side == "top" {
    @if $align == "center" {
      right: 50%;
      margin-right: -$arrowSize;
    }
    @else if $align == "left" {
      left: $margin;
    }
    @else if $align == "right" {
      right: $margin;
    }
  }
}

@mixin arrow($side: "right", $align: "center", $size: 20px, $color: #f6f6f6, $borderColor: "none", $borderSize: 3px) {
  $selector: "&:after, &:before";
  position: relative;
  @if $borderColor == "none" {
    $selector: "&:after";
  }
  #{$selector} {
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    visibility: visible;
  }

  &:after {
    border-width: $size;
    @include arrow_helper($size, $color, $size, $side, $align);
  }

  @if $borderColor != "none" {
    &:before {
      border-width: $borderSize + $size;
      @include arrow_helper($size + $borderSize, $borderColor, $size - $borderSize, $side, $align);
    }
  }
}

$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin layer($layer){
        z-index: $layer;
}
@mixin abs-anchor($setting: 'tl'){
    position: absolute;
    @if $setting == 'br' or $setting =='bottom-right'{
        bottom: 0;
        right: 0;
    }
    @else if $setting == 'tr' or $setting == 'top-right'{
        top: 0;
        right: 0;
    }
    @else if $setting == 'bl' or $setting =='bottom-left'{
        bottom: 0;
        left: 0;
    }
    @else if $setting == 'tl' or $setting == 'top-left'{
        top: 0;
        left: 0;
    }
    @else if $setting == 'r' or $setting == 'right'{
        right: 0;
    }
    @else if $setting == 'l' or $setting == 'left'{
        left: 0;
    }
    @else if $setting == 't' or $setting == 'top'{
        top: 0;
    }
    @else if $setting == 'b' or $setting == 'bottom'{
        bottom: 0;
    }
}


@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

@mixin theme ($background, $border: '', $border-img: '', $border-radius: '') {

    & .header {
        background: $background;
        background-size: 200px 200px;
    }

    &.menu{
        & .background {

            &:before {
                @include layer(-2);
                content: "";
                background: $background;
                position: absolute;
                height: 100%;
                top: 0; right: 0; left: 0;
                filter: blur(1px);
            }

            &:after {
                content: "";
                background: rgba(230,240,255,0.4);
                border: 2px dashed transparent;
                box-shadow: 0px 0px 1px 1px rgba(0,0,0,0.15);
                border-radius: 4px;
                position: absolute;
                width: 100%;
                height: 100%;
            }
        }

        & .main {
            background: $background;
            border: $border;
            border-image: $border-img;
            border-radius: $border-radius;
        }
    }
}

@mixin theme-colors($primary, $seconday, $tertiary, $accent) {
    $background: linear-gradient(to bottom, darken($tertiary, 30%) 0%,
                $tertiary 50%,
                darken(saturate($tertiary, 10%), 10%) 51%,
                lighten(desaturate($tertiary, 10%), 10%) 100%);

    .day {
        background-color: $primary;
    }

    .weekday {
        background-color: $seconday;
    }

    .nonday {
        background-color: $tertiary;
    }

    .calEvent {
        background-color: $seconday;
        border-color: lighten($seconday, 10%);
    }

    .cell {
        outline: 2px solid $accent;
    }

    & .menu.header {
        $hue: hue($tertiary);
        background: $background;
        border-color: darken(saturate($tertiary, 10%), 10%);

        & .close {
            background: linear-gradient(to bottom, lighten(desaturate($seconday, 10%), 20%) 0%,
            $primary 50%,
            darken(saturate($primary, 30%), 5%) 51%,
            lighten(desaturate($seconday, 2%), 2%) 100%);

            border-color: darken(saturate($primary, 30%), 5%);

            &:hover {
                box-shadow: darken(saturate($primary, 30%), 5%) 0px 0px 8px;
            }
        }
    }

    & .menu.btn-container {
        & button {
            background: $background;
        }
    }

    textarea, input {
        &:hover,:focus {
            box-shadow: 0px 0px 8px rgba($accent, 0.3);
        }
    }

    .footer{
        background: $seconday;
        $oppsite-primary: opposite-lightness($primary);

        & svg{
            fill: darken($primary, 10);

            &:hover{
                fill: $tertiary;
            }
        }

        & .standOut{
            //background: linear-gradient(to right, rgba(complement($primary),0.5) 0,
            //rgba(invert($primary),0.3) 50%,
            //rgba(complement($primary),0) 100%);
        }
    }

}
